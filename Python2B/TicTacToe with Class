## MODULES
from math import inf
from random import randint


## CONSTANTS
symbols = [" ", "X", "O"]


## CLASSES
class Square:
    def __init__ (self, initial = 0):
        assert type(initial) == type(0)
        self.value = initial

    def __repr__ (self):
        return symbols[self.value]

    def __str__ (self):
        return symbols[self.value]

    def get_symbol(self):
        return symbols[self.value]
    
    def get_value(self):
        return self.value

    def set_value(self, value):
        assert type(value) == type(0)
        self.value = value

class Board:
    def __init__ (self, size, initial = 0):
        self.size = size
        self.squares = [Square(initial) for i in range(size ** 2)]

    def __repr__(self):
        self.display()

    def __str__(self):
        self.display()

    def get_index(self, rank, file):
        return rank * self.size + file

    def get_coord(self, index):
        rank = index // self.size
        file = index % self.size
        return rank, file

    def get_square(self, rank, file):
        index = self.get_index(rank, file)
        square = self.squares[index]
        return square

    def display_board(self):
        for rank in range(self.size - 1, 0 - 1, -1):
            border = "  +"
            row = str(rank + 1) + " |"

            for file in range(self.size):
                border += " - +"
                square = self.get_square(rank, file)
                piece = square.get_symbol()
                row += " " + piece + " |"

            print(border)
            print(row)

        print(border)

        row = "   "

        for file in range(self.size):
            number = ord("A") + file
            letter = chr(number)
            row += " " + letter + "  "

        print(row)

    def display(self):
        self.display_board()
        
## FUNCTIONS
def parse_move(coord, board):
    file = coord[0]

    if file.isalpha():
        file = file.upper()
        file = ord(file) - ord("A")

    else:
        file = inf

    rank = coord[1]

    if rank.isnumeric():
        rank = int(rank) - 1

    else:
        rank = inf
        
    return rank, file

def validate_move(rank, file, board):
    if rank >= board.size:
        return False

    if file >= board.size:
        return False

    square = board.get_square(rank, file)
    if square.get_value() != 0:
        return False

    return True

def player_moves(board):
    valid = False

    while not valid:
        coord = input("Move eg A1, B2, etc? ")

        rank, file = parse_move(coord, board)

        valid = validate_move(rank, file, board)

        if not valid:
            print("Try again \n")

        else:
            square = board.get_square(rank, file)
            square.set_value(1)

    return board
    
def computer_moves(board):
    return board
    
def update_status(board):
    win = False
    tie = False
    return win, tie

def tic_tac_toe(size = 3):
    board = Board(size)

    print("\n")
    board.display()
    print("\n")

    win, tie = update_status(board)

    turn = 0
    while not (win or tie):
        # who's turn is it?
        if turn % 2 == 0:
            board = player_moves(board)

        else:
            board = computer_moves(board)
            
            print("\n")
            board.display()
            print("\n")

        turn += 1

        # continue?
        win, tie = update_status(board)
        
        
## MAIN
tic_tac_toe()
